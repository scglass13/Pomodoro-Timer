{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\scgla\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport SessionTitle from \"./components/SessionTitle\";\nimport PlayStop from \"./components/PlayStop\"; // These functions are defined outside of the component to ensure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  const elapsedSeconds = prevState.timeTotal - timeRemaining;\n  return { ...prevState,\n    timeRemaining,\n    percentComplete: elapsedSeconds / prevState.timeTotal * 100\n  };\n}\n\nconst percentage = prevState => {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  const elapsedSeconds = prevState.timeTotal - timeRemaining;\n  return elapsedSeconds / prevState.timeTotal * 100;\n};\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n/**\n * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        duration: minutesToDuration(breakDuration),\n        timeRemaining: breakDuration * 60,\n        percentComplete: 0\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      duration: minutesToDuration(focusDuration),\n      timeRemaining: focusDuration * 60,\n      percentComplete: 0\n    };\n  };\n}\n\nfunction Pomodoro() {\n  const initialTimerState = {\n    play: false,\n    pause: false,\n    stop: true\n  };\n  const [timerState, setTimerState] = useState(initialTimerState);\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [session, setSession] = useState(null);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [sessionInfo, setSessionInfo] = useState(\"none\");\n  const [timeRemaining, setTimeRemaining] = useState(focusDuration);\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n\n  const stop = () => {\n    setIsTimerRunning(false);\n    setSession(null);\n  };\n\n  function findProgressPercent() {\n    let percent;\n\n    if (session) {\n      percent = Math.round((breakDuration - timeRemaining) * 100 / breakDuration);\n    } else {\n      percent = Math.round((focusDuration - timeRemaining) * 100 / focusDuration);\n    }\n\n    setProgressPercent(percent);\n  }\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            setSessionInfo(null);\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group input-group-lg mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"input-group-text\",\n    \"data-testid\": \"duration-focus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, \"Focus Duration: \", minutesToDuration(focusDuration)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group-append\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setFocusDuration(Math.max(focusDuration - 5, 5));\n    },\n    disabled: session,\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    \"data-testid\": \"decrease-focus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-minus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setFocusDuration(Math.min(focusDuration + 5, 60));\n    },\n    disabled: session,\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    \"data-testid\": \"increase-focus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-plus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group input-group-lg mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"input-group-text\",\n    \"data-testid\": \"duration-break\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  }, \"Break Duration: \", minutesToDuration(breakDuration)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group-append\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setBreakDuration(Math.max(breakDuration - 1, 1));\n    },\n    disabled: session,\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    \"data-testid\": \"decrease-break\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-minus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setBreakDuration(Math.min(breakDuration + 1, 15));\n    },\n    disabled: session,\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    \"data-testid\": \"increase-break\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-plus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 19\n    }\n  }))))))), /*#__PURE__*/React.createElement(PlayStop, {\n    stop: stop,\n    playPause: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SessionTitle, {\n    session: session,\n    percent: percentage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/scgla/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","minutesToDuration","secondsToDuration","SessionTitle","PlayStop","nextTick","prevState","timeRemaining","Math","max","elapsedSeconds","timeTotal","percentComplete","percentage","nextSession","focusDuration","breakDuration","currentSession","label","duration","Pomodoro","initialTimerState","play","pause","stop","timerState","setTimerState","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","sessionInfo","setSessionInfo","setTimeRemaining","Audio","findProgressPercent","percent","round","setProgressPercent","playPause","nextState","prevStateSession","min"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport SessionTitle from \"./components/SessionTitle\";\nimport PlayStop from \"./components/PlayStop\";\n\n// These functions are defined outside of the component to ensure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  const elapsedSeconds = prevState.timeTotal - timeRemaining;\n  return {\n    ...prevState,\n    timeRemaining,\n    percentComplete: (elapsedSeconds / prevState.timeTotal) * 100,\n  };\n}\n\nconst percentage = (prevState) => {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  const elapsedSeconds = prevState.timeTotal - timeRemaining;\n  return (elapsedSeconds / prevState.timeTotal) * 100;\n};\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n/**\n * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n */\nfunction nextSession(focusDuration, breakDuration) {\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        duration: minutesToDuration(breakDuration),\n        timeRemaining: breakDuration * 60,\n        percentComplete: 0,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      duration: minutesToDuration(focusDuration),\n      timeRemaining: focusDuration * 60,\n      percentComplete: 0,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  const initialTimerState = {\n    play: false,\n    pause: false,\n    stop: true,\n  };\n\n  const [timerState, setTimerState] = useState(initialTimerState);\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [session, setSession] = useState(null);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [sessionInfo, setSessionInfo] = useState(\"none\");\n  const [timeRemaining, setTimeRemaining] = useState(focusDuration);\n\n  useInterval(\n    () => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  const stop = () => {\n    setIsTimerRunning(false);\n    setSession(null);\n  };\n\n  function findProgressPercent() {\n    let percent;\n    if (session) {\n      percent = Math.round(\n        ((breakDuration - timeRemaining) * 100) / breakDuration\n      );\n    } else {\n      percent = Math.round(\n        ((focusDuration - timeRemaining) * 100) / focusDuration\n      );\n    }\n    setProgressPercent(percent);\n  }\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            setSessionInfo(null);\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\n              {/* ✔ TODO: Update this text to display the current focus session duration */}\n              Focus Duration: {minutesToDuration(focusDuration)}\n            </span>\n            <div className=\"input-group-append\">\n              {/* ✔ TODO: Implement decreasing focus duration and disable during a focus or break session */}\n              <button\n                onClick={() => {\n                  setFocusDuration(Math.max(focusDuration - 5, 5));\n                }}\n                disabled={session}\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"decrease-focus\"\n              >\n                <span className=\"oi oi-minus\" />\n              </button>\n              {/* ✔ TODO: Implement increasing focus duration  and disable during a focus or break session */}\n              <button\n                onClick={() => {\n                  setFocusDuration(Math.min(focusDuration + 5, 60));\n                }}\n                disabled={session}\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"increase-focus\"\n              >\n                <span className=\"oi oi-plus\" />\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* ✔ TODO: Update this text to display the current break session duration */}\n                Break Duration: {minutesToDuration(breakDuration)}\n              </span>\n              <div className=\"input-group-append\">\n                {/* ✔ TODO: Implement decreasing break duration and disable during a focus or break session*/}\n                <button\n                  onClick={() => {\n                    setBreakDuration(Math.max(breakDuration - 1, 1));\n                  }}\n                  disabled={session}\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"decrease-break\"\n                >\n                  <span className=\"oi oi-minus\" />\n                </button>\n                {/* ✔ TODO: Implement increasing break duration and disable during a focus or break session*/}\n                <button\n                  onClick={() => {\n                    setBreakDuration(Math.min(breakDuration + 1, 15));\n                  }}\n                  disabled={session}\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"increase-break\"\n                >\n                  <span className=\"oi oi-plus\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <PlayStop stop={stop} playPause={playPause} />\n      <div>\n        <SessionTitle session={session} percent={percentage} />\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}